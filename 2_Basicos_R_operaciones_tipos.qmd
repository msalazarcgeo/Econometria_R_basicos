---
title: "Operaciones y tipos de datos"
#author: "J. Miguel Salazar (msalazar@centrogeo.edu.mx), Ana J. Alegre (jalegre@centrogeo.edu.mx), Cristian Silva (csilva@centrogeo.edu.mx)"
format: live-html
encoding: UTF-8
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

*R* como cualquier lenguaje de programación tiene una sintaxis especifica, en este pequeño espacio vamos a repasar dicha sintaxis para hacer operaciones, declarar variables, ver los tipos de datos, y ver ciertas funciones básicas que nos haran la vida más facil para programar en *R*.


En este sitio se pueden ejecutar las celdas de código, en RStudio se puede ejecutar en la consola de *R* o pueden hacer un Markdown para tomar notas.



## Operadores básicos

Ejecuta el siguiente *chunk* para obtener el resultado de la suma de
`34 + 56`:


```{webr}
#| label: cell_suma
34 + 56
```

Completa el siguiente bloque para obtener la resta de `45 - 13`
(sustituye los asteriscos \*\*\* con el valor necesario):

```{webr}
#| label: cell_resta
45 - ***
```

Obtén los resultados de la multiplicación de `34 * 0.14` y la división
de `89.4 / 5`:

```{webr}
#| label: cell_multiplicacion
34 *** ***

```


```{webr}
#| label: cell_division
*** / ***
```


Más operaciones matemáticas que se utilizan comunmente   

**Exponente**
```{webr}
#| label: cell_exponencial
2^4 #Exponencial
```

```{webr}
#| label: cell_exponencial_2
2**4 #?
```
**Modulo**

```{webr}
#| label: cell_modulo
20%4 ## Modulo 
```

**División entero más cercano**
```{webr}
#| label: cell_div_entero
5 %/% 3  ##Division entera
```

**Mayor**
```{webr}
#| label: cell_mayor
3 > 4  # FALSE
```
**Menor**
```{webr}
#| label: cell_menor
3 < 6  # TRUE
```
**Mayor o igual**
```{webr}
#| label: cell_mayor_igual
3 >= 7 # FALSE
```
**Menor o igual**
```{webr}
#| label: cell_menor_igual
3 <= 7 # TRUE
```
**Comparar igualdad**
```{webr}
#| label: cell_comparar
3 == 7 # FALSE
```
**Distinto**
```{webr}
#| label: cell_distintos
3 != 9 # TRUE
```
Como vemos, el resultado de las últimas operaciones no son números este tipo de dato se le conoce como boleano o logico los cuales tiene 2 valores `FALSE` y `TRUE`. En este contexto, nos sirve para hacer comparaciónes pero dentro de los lenguajes de programación son muy importantes. 

## Asignación de variables


Para crear variables y asignarles un valor se usan los operadores `<-` o
`=`. Asigna el valor numérico de `45` a la variable `mi_numero`:

```{webr}
#| label: cell_asignar
mi_numero <- *** # Más común en R
```
 
Para ver el valor de una variable, escribe su nombre y ejecuta el código. Ejecuta el siguiente *chunk* para visualizar el valor de la variable `mi_numero`:

```{webr}
#| label: cell_mostrar
mi_numero
```

La asignación de valores a una variable también se puede hacer de manera inversa usando la flecha `->` en vez de `<-` y especificando primero el valor y luego el nombre de la variable. Asigna nuevamente el valor `36` a la variable `otro_numero`, usando ahora la asignación inversa, y visualiza el valor de la variable `otro_numero` en la siguiente línea: 

```{webr}
#| label: cell_asignar_contrario
36 -> ***

```

```{webr}
#| label: cell_mostrar_2
otro_numero
```

Para asignar una variable de tipo texto o caracter, el valor tiene que escribirse entre comillas dobles `"` o simples `'`. Asigna el valor `"Este es un texto!"` a la variable `mi_texto`:

```{webr}
#| label: cell_asignar_2
mi_texto <- ***
```


## Tipos de datos

Al igual que otros lenguajes de programación, *R* maneja diferentes tipos de datos básicos para almacenar datos. Es importante entender estos tipos de datos para poder utilizar las funciones de *R* correctamente.


#### Numérico

Son números que tienen un valor decimal o son una fracción. Asigna el valor númerico de `1.5` a la variable `a` y en la siguiente línea visualiza su valor:

```{webr}
#| label: cell_asignar_a_mostrar
a <- ***

# Visualizar el valor de a:
***
```

La función `class` se usa para comprobar el tipo de dato de una variable. Comprueba el tipo de dato de la variable `a`:

```{webr}
#| label: cell_ver_clase
class(a)
```

Tambien se puede usar  la función `typeof()`. 

### Entero

Los números que no contienen valores decimales tienen un tipo de datos *entero*. Por defecto, si se escribe un número sin valor decimal, *R* lo interpreta como *numérico*, por lo que es necesario declararlo explícitamente como entero utilizando la función `as.integer`. Cambia el valor numérico de la variable `a` por el valor entero de `1` convirtiendo `1.5` con la función `as.integer` y visualiza el nuevo valor de `a`:

```{webr}
#| label: cell_eonvertir_entero
a <- as.integer(***) # Cuando se convierte el número a entero se trunca la parte decimal

```

Ahora, comprueba el nuevo tipo de datos de la variable `a`:

```{webr}
#| label: cell_exercicio_tipo_dato
***(***)
```

### Caracter

Una letra, número o una combinación de letras encerrada entre comillas simples `'` o dobles `"` es considerada como un tipo de datos de caracter por *R*. Cambia el valor de la variable entera `a` por el texto `"Me gusta este taller! (O no?)"` y visualiza el nuevo valor de `a`:

```{webr}
a <- *** 
*** # Visualizar el valor de la variable
```

Ahora, comprueba el nuevo tipo de dato de la variable `a`:

```{webr}
***(***)
```

Los tipos de datos de tipo caracter también se conocen como *cadenas de texto*.

### Lógico

Una variable que sólo puede tener los valores `TRUE` (verdadero) y `FALSE` (falso) es conocida como *variable lógica* o *booleana*. Cambia el valor de la variable de caracter `a` con el valor `FALSE` (con mayúsculas) y visualiza su valor:

```{webr}
a <- ***
***
```

Ahora, comprueba el nuevo tipo de dato de la variable `a`:

```{webr}
***(***)
```



## Condicionales

Asigna el valor 5 a la variable `a` y el valor 6 a la variable `a`:

```{webr}
a <- ***
*** -> b # Asignación inversa
```

Ejecuta el siguiente *chunk* para comparar los valores de las variables `a` y `b`:

```{webr}
a == b # Igual
a != b # No igual
a > b # a es mayor a b
a >= b # a es mayor o igual que b
a < b # a es menor que b
a <= b # a es menor o igual que b
is.na(a) # No tiene valor (NA)
is.null(b) # Tiene un valor vacío (NULL)
```

Es posible comparar valores únicos, vectores de múltiples elementos o ambos. Comprueba cada uno de los elementos de `mi_vector` para verificar si son mayores que el valor de `a`:

```{webr}
mi_vector > *** # Comparar cada elemento en mi_vector con la variable a
```

Verificar si el valor de `b` está entre los elementos de `mi_vector` usando el operador `%in%`:

```{webr}
b %in% *** # b es un elemento de mi_vector?
```



## Vectores y Listas


### Vectores

Los vectores son estructuras básicas de datos que se usan en *R* para computar múltiples valores a la vez y para almacenar elementos con el mismo tipo de datos. Completa los valores necesarios para crear un vector con los elementos `(5, 2, 4, 9, 8, 9, 1, 2, 2)` usando `c()`, asignalo a la variable `mi_vector` y visualiza el valor de la variable en la siguiente línea:

```{webr}
mi_vector <- c(5, 2, 4, ***, ***, ***, ***, ***, ***)
***
```

Ahora, comprueba el nuevo tipo de dato de la variable `mi_vector`:

```{webr}
***(***) # Tipo de datos de los elementos del vector
```

### Listas

Las listas son estructuras que permiten almacenar múltiples *componentes* de cualquier tipo que *R* pueda manejar, como las *variables*, los *vectores* u otras *listas*. A diferencia de los vectores, las listas permiten almacenar diferentes tipos de datos y estructuras.

Asigna los valores de texto `("A", "B", "C")` a la variable `b`, y crea una lista llamada `mi_lista` que contenga como componentes el valor `TRUE` y las variables `mi_vector` y `otro_vector` usando la función `list`. Visualiza el contenido de `mi_lista`:

```{webr}
otro_vector <- c("A", ***, ***) # Crear otro vector con valores
mi_lista <- list(TRUE, ***, ***) # Construir la lista
*** # Visualizar el contenido de la lista
```

Crea otra lista llamada `otra_lista` que contenga como componentes el valor `456.123` y la lista `mi_lista` y visualiza el contenido de `otra_lista`:

```{webr}
otra_lista <- ***(***, ***)
*** # Previsualiza el contenido de la lista
```

Ahora, comprueba el tipo de dato de la variable `otra_lista`:

```{webr}
***(***)
```

### Factores

Se usan para crear variables categóricas como por ejemplo *colores*, *bueno y malo*, *calificaciones de cursos o películas*, que son muy útiles para el modelado estadístico. Cambia el valor de la variable lógica `a` por un factor construido a partir de los valores `c("bajo", "bajo", "alto", "medio", "alto", "medio", "bajo")` usando la función `factor` y visualiza el nuevo valor de la variable `a` en la siguiente línea:

```{webr}
a <- factor(c("bajo", "bajo", ***, ***, ***, ***, ***))
***
```

Un factor permite agrupar los valores por categorías llamadas `niveles`. Comprueba los niveles en los que se pueden agrupar los valores del factor `a`, usando la función `levels`:

```{webr}
levels(***)
```

Ahora, comprueba el nuevo tipo de dato de la variable `a`:

```{webr}
***(***)
```


## Operaciones con vectores 



Crea un vector con una secuencia de números enteros del 2 al 10, usando la instrucción `2:10`:

```{webr}
***:***
```

Crea un vector que contenga la secuencia de 0 a 10 con pasos de 2.5 usando la función `seq`:

```{webr}
seq(from = ***, to = ***, by = 2.5)
```

Repite 4 veces los elementos del vector `1:3` usando la función `rep`, especificando el parámetro `times`:

```{webr}
rep(***, times = 4) # Repetir un vector n veces
```

Repite 3 veces cada uno de los valores del vector `1:2` usando la función `rep`, especificando el parámetro `each`:

```{webr}
rep(***, each = 3) # Repetir cada valor de un vector n veces
```

Ordena de manera ascendente los valores de `mi_vector` usando la función `sort`:

```{webr}
sort(***)
```

Ordena de manera descendente los valores de `mi_vector` usando la función `sort`, ahora especificando el parámetro `decreasing = TRUE`:

```{webr}
sort(***, decreasing = ***) # Orden descendente
```

Invierte el orden de los elementos de `mi_vector` usando la función `rev`:

```{webr}
rev(***)
```

Obtén una tabla con el conteo de cada elemento de `mi_vector` usando `table`:

```{webr}
table(***)
```

Obtén los valores únicos del vector `mi_vector` usando la función `unique`:

```{webr}
unique(***)
```

#### Selecion de elementos
En *R* se utilizan los corchetes `[]`  para seleccionar elementos internos, para seleccionar el cuarto elemento de `mi_vector` 


```{webr}
***[4] # Selecciona el 4to. elemento en mi_vector
```
::: {.callout-important}
El índice  en *R* empieza desde 1, otros lenguajes de programación es distinto. 

:::

Selecciona todos los elementos de `mi_vector` excepto el cuarto usando el índice negativo `-4`:

```{webr}
***[-4] # Selecciona todo excepto el 4to. elemento en mi_vector
```

Selecciona los elementos 2 al 5 de `mi_vector`:

```{webr}
***[***:5] # Selecciona del 2do. al 5to. elemento en mi_vector
```

Selecciona todos los elementos de `mi_vector` excepto los del 2 al 5 usando el índice negativo `-(2:5)`:

```{webr}
***[-(2:***)] # Selecciona todos los elementos excepto los elementos del 2do. al 5to. en mi_vector
```

Selecciona sólo los elementos 1 y 5 de `mi_vector` usando el vector `c(1,5)`:

```{webr}
***[c(***,5)] # Selecciona sólo el 1ro. y 5to. elementos en mi_vector
```

Seleccionar elementos de `mi_vector` que son iguales a 2:

```{webr}
***[mi_vector == ***] # Seleccionar elementos iguales a 2 en mi_vector
```

Selecciona elementos de `mi_vector` que sean menores a 3:

```{webr}
***[*** < 3] # Selecciona los elementos menores a 3 en mi_vector
```

Selecciona los elementos de `mi_vector` que sean iguales a 1, 2 ó 5 usando el operador `%in%` y un vector con los valores `c(1, 2, 5)`:

```{webr}
***[*** %in% c(1, ***, ***)]
```


## Dataframes

En *R*, un *dataframe* es una colección de elementos acoplados que construyen una tabla donde cada columna tienen un tipo de datos en particular. Los *dataframes* son las estructuras de datos fundamentales que usa la mayoría del software de modelado de *R*.

Construye un *dataframe* usando la función `data.frame` e incluyendo como parámetros una columna `x` con los valores enteros de 1 a 5 y una columna `y` con los caracteres `("A", "B", "C", "D", "E")`, asígnalo a la variable `mi_df` y visualiza su contenido en la siguiente línea:

```
mi_df <- data.frame(x = ***, y = c(***))
*** # Visualizar el contenido del dataframe 
```
 
Visualiza el contenido completo de `mi_df` usando la función `View` (en *RStudio*, se abre una nueva ventana):

```{webr}
View(***)
```

También puedes visualizar los *dataframes* usando el panel *Environment* en *RStudio*.

Visualiza rápidamente las primeras filas de `mi_df`, usando la función `head` para visualizar las primeras 5 filas especificando el parámetro `n = 5`:

```{webr}
head(***, n = ***) # Si se omite el parámetro n, la función head regresa las primeras 5 filas por defecto
```

Visualiza rápidamente las últimas filas de `mi_df`, usando la función `tail` para visualizar las últimas 5 filas especificando el parámetro `n = 5`:

```{webr}
tail(***, n = ***) # Si se omite el parámetro n, la función tail regresa las últimas 5 filas por defecto
```

Para acceder a una fila en particular en *dataframe*, especifica la posición del elemento entre corchetes ([Fila, Columna]). Accede al contenido de la primera fila completa de `mi_df`, omitiendo el índice para la columna:

### Dataframes

En *R*, un *dataframe* es una colección de elementos acoplados que construyen una tabla donde cada columna tienen un tipo de datos en particular. Los *dataframes* son las estructuras de datos fundamentales que usa la mayoría del software de modelado de *R*.

Construye un *dataframe* usando la función `data.frame` e incluyendo como parámetros una columna `x` con los valores enteros de 1 a 5 y una columna `y` con los caracteres `("A", "B", "C", "D", "E")`, asígnalo a la variable `mi_df` y visualiza su contenido en la siguiente línea:

```
mi_df <- data.frame(x = ***, y = c(***))
*** # Visualizar el contenido del dataframe 
```
 
Visualiza el contenido completo de `mi_df` usando la función `View` (en *RStudio*, se abre una nueva ventana):

```{webr}
View(***)
```

También puedes visualizar los *dataframes* usando el panel *Environment* en *RStudio*.

Visualiza rápidamente las primeras filas de `mi_df`, usando la función `head` para visualizar las primeras 5 filas especificando el parámetro `n = 5`:

```{webr}
head(***, n = ***) # Si se omite el parámetro n, la función head regresa las primeras 5 filas por defecto
```

Visualiza rápidamente las últimas filas de `mi_df`, usando la función `tail` para visualizar las últimas 5 filas especificando el parámetro `n = 5`:

```{webr}
tail(***, n = ***) # Si se omite el parámetro n, la función tail regresa las últimas 5 filas por defecto
```

Para acceder a una fila en particular en *dataframe*, especifica la posición del elemento entre corchetes ([Fila, Columna]). Accede al contenido de la primera fila completa de `mi_df`, omitiendo el índice para la columna:

```{webr}
mi_df[***, ] # Omite el índice de la columna para acceder a la fila completa
```

Accede al contenido de la primer columna completa de `mi_df`, omitiendo el índice para la fila:

```{webr}
mi_df[, ***] # Omite el índice de la fila para acceder a la columna completa
```

La manera más común de acceder a los valores en una variable (columna) es usando el separador `$`. Accede al valor de la columna `y` de `mi_df` usando el separador `$`:

```{webr}
mi_df$*** # Usa el nombre de la variable
```

Accede a al elemento que está en la segunda fila y en la segunda columna de `mi_df`:

```{webr}

mi_df[***, ***] # Acceder al elemento de la fila 2, columna 2
```

Comprueba el número de filas y columnas (dimensiones) que tiene `mi_df` usando la función `dim`:

```{webr}

dim(***) # Dimensiones del dataframe (números de columnas y filas)
```

Comprueba el número de filas que tiene `mi_df` usando la función `nrow`:

```{webr}

nrow(***) # Número de filas en un dataframe
```

Comprueba el número de columnas que tiene `mi_df` usando la función `ncol`:

```{webr}

ncol(***) # Número de columnas en un dataframe
```

Crea un *dataframe* de una sola columna llamada `z` que contenga los valores enteros de 6 a 10, asígnalo a la variable `nueva_columna` y visualiza su contenido en la siguiente línea:

```{webr}

nueva_columna <- data.frame(*** = c(***:***)) # Debe tener el mismo número de filas que el dataframe
***
```

Agrega la columna del dataframe `nueva_columna` a `mi_df` usando la función `cbind`:

```{webr}

mi_df <- cbind(mi_df, ***)
***
```

Extrae la fila 2 de `mi_df`, asígnala a la variable `nueva_fila` y visualiza su contenido:

```{webr}

nueva_fila <- mi_df[***, ] # Agregar una copia de la fila 2, debe tener los mismos nombres de variables o se agregarán nuevas columnas con los nombres restantes
*** # Visualiza el contenido del dataframe
```

Agregar la fila de `nueva_fila` al `mi_df`usando la función `rbind`:

```{webr}

mi_df <- rbind(mi_df, ***)
***
```

Usa la función `str` para visualizar un resumen de la estructura y contenido del *dataframe* `mi_df`:

```{webr}
#| eval: false
str(***)
```

Revisa los estadísticos básicos de las columnas del dataframe `mi_df` usando la función `summary`:

```{r}
#| eval: false
summary(***)
```l índice de la fila para acceder a la columna completa
```

La manera más común de acceder a los valores en una variable (columna) es usando el separador `$`. Accede al valor de la columna `y` de `mi_df` usando el separador `$`:

```{webr}
mi_df$*** # Usa el nombre de la variable
```

Accede a al elemento que está en la segunda fila y en la segunda columna de `mi_df`:

```{webr}

mi_df[***, ***] # Acceder al elemento de la fila 2, columna 2
```

Comprueba el número de filas y columnas (dimensiones) que tiene `mi_df` usando la función `dim`:

```{webr}

dim(***) # Dimensiones del dataframe (números de columnas y filas)
```

Comprueba el número de filas que tiene `mi_df` usando la función `nrow`:

```{webr}

nrow(***) # Número de filas en un dataframe
```

Comprueba el número de columnas que tiene `mi_df` usando la función `ncol`:

```{webr}

ncol(***) # Número de columnas en un dataframe
```

Crea un *dataframe* de una sola columna llamada `z` que contenga los valores enteros de 6 a 10, asígnalo a la variable `nueva_columna` y visualiza su contenido en la siguiente línea:

```{webr}

nueva_columna <- data.frame(*** = c(***:***)) # Debe tener el mismo número de filas que el dataframe
***
```

Agrega la columna del dataframe `nueva_columna` a `mi_df` usando la función `cbind`:

```{webr}

mi_df <- cbind(mi_df, ***)
***
```

Extrae la fila 2 de `mi_df`, asígnala a la variable `nueva_fila` y visualiza su contenido:

```{webr}

nueva_fila <- mi_df[***, ] # Agregar una copia de la fila 2, debe tener los mismos nombres de variables o se agregarán nuevas columnas con los nombres restantes
*** # Visualiza el contenido del dataframe
```

Agregar la fila de `nueva_fila` al `mi_df`usando la función `rbind`:

```{webr}

mi_df <- rbind(mi_df, ***)
***
```

Usa la función `str` para visualizar un resumen de la estructura y contenido del *dataframe* `mi_df`:

```{webr}
#| eval: false
str(***)
```

Revisa los estadísticos básicos de las columnas del dataframe `mi_df` usando la función `summary`:

```{r}
#| eval: false
summary(***)
```
## Evaluación 

* ¿ Cuál de los siguientes asigna a la variable `patito` el valor de la cadena de caracteres `"esta es la variable patito"`. 
    * `patito <- esta es la variable patito`
    * `patito -> esta es la variable patito`
    * `patito -< "esta es la variable patito"`
    * `patito <- "esta es la variable patito"`

* ¿ Cuál de la siguentes asigna a la variable `patito` el valor flotante `2`  ?
    
    * `patito -> 2.0`
    * `patito -< 2.0`
    * `patito <- "2.0"`
    * `patito <- 2`

* ¿ Cuál de las siguientes genera una secuencia del 59 al 75 de 3 en 3 ?
    * `seq(from = 59, to 75 , by = 3)`
    * `seq(from = 59, to= 75 , by = 3)`
    * `seq(59:75 , by = 3)`
    * `seq(from = 75, to= 59 , by = 3)`

* ¿ Cuál de las siguientes genera una secuencia del 59 al 75 de 3 en 3 ?
    * `seq(from = 59, to 75 , by = 3)`
    * `seq(from = 59, to= 75 , by = 3)`
    * `seq(59:75 , by = 3)`
    * `seq(from = 75, to= 59 , by = 3)`

* ¿ Cuál genera un vector aleatorio ordenado de longitud 20 ? 
     * `sample(seq(1:100), 20)`
     * `head(sample(seq(1:100) , 20))` 
     * `tail(sample(seq(1:100) , 20))`
     * `sort(sample(seq(1:100), 20))`
     

* ¿ Cuál de los siguientes genera un dataframe con columnas A, B, C, D con los mismos valores en las columnas? 
    * `data.frame(A = seq(15:30), B= seq(15:30), C= seq(15:30),D= seq(15:30))`
    * `data.frame(A = 1:15, B= 16:30, C= 31:45,D= 46:60)`
    * `data.frame(A = seq(1:15), B= 16:30, C= 31:45,D= 46:60)`
    * `data.frame(A = seq(15:30), B= seq(15:30), C= seq(15:30),D= rev(seq(15:30)))`


* ¿ Cual de las siguentes me permite acceder al numero 20 en en siguiente dataframe ?
```r
df <- data.frame(A = 1:15, B= 16:30, C= 31:45,D= 46:60)
```
    * df[5,20]
    * df[2,3]
    * df[5,'D']
    * df[5,'B']

## Referencias

-   Wickham, H., & Grolemund, G. (2017). *R for data science: Import,     tidy, transform, visualize and model data.  <https://r4ds.had.co.nz>*. O'Reilly.
-   Xie, Y., Allaire, J. J., & Grolemund, G. (2018). *R markdown: The     definitive guide. <https://bookdown.org/yihui/rmarkdown/>*. CRC Press.

-   *RStudio Cheatsheets*. (n.d.). Rstudio.com. Recuperado el 8 de  septiembre de 2021, desde
    <https://www.rstudio.com/resources/cheatsheets/> 
-   Baruffa O. (2021). *Big Book of R*.   <https://www.bigbookofr.com/index.html>

