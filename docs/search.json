[
  {
    "objectID": "3_Programacion_fechas.html#referencias",
    "href": "3_Programacion_fechas.html#referencias",
    "title": "Untitled",
    "section": "Referencias",
    "text": "Referencias"
  },
  {
    "objectID": "4_Tidyverse.html",
    "href": "4_Tidyverse.html",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "",
    "text": "El data wrangling, también conocido como limpieza de datos se refiere al proceso manual o automatizado mediante el cual los datos crudos son transformados en formatos más útiles para el análisis. Estos procesos incluyen la identificación de faltantes de infromación, la eliminación de datos irrelevantes, la combinación de múltiples fuentes de datos o la transformación de su estructura en una más apropiada (más conocida como datos ordenados).\nEs posible usar el lenguaje R para leer, escribir y manipular datos que provienen de diferentes formatos, desde texto plano en CSV hasta formatos espaciales como Shapefile, GeoPackage, imágenes raster en TIFF entre otras. Una de las ventajas de usar R para el manejo de datos es la posibilidad de automatizar procesos previos al análisis de datos para ahorrar tiempo."
  },
  {
    "objectID": "4_Tidyverse.html#introducción",
    "href": "4_Tidyverse.html#introducción",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "",
    "text": "El data wrangling, también conocido como limpieza de datos se refiere al proceso manual o automatizado mediante el cual los datos crudos son transformados en formatos más útiles para el análisis. Estos procesos incluyen la identificación de faltantes de infromación, la eliminación de datos irrelevantes, la combinación de múltiples fuentes de datos o la transformación de su estructura en una más apropiada (más conocida como datos ordenados).\nEs posible usar el lenguaje R para leer, escribir y manipular datos que provienen de diferentes formatos, desde texto plano en CSV hasta formatos espaciales como Shapefile, GeoPackage, imágenes raster en TIFF entre otras. Una de las ventajas de usar R para el manejo de datos es la posibilidad de automatizar procesos previos al análisis de datos para ahorrar tiempo."
  },
  {
    "objectID": "4_Tidyverse.html#objetivo",
    "href": "4_Tidyverse.html#objetivo",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "Objetivo",
    "text": "Objetivo\nEl objetivo de esta sesión es realizar ejercicios con las principales funciones del paquete tidyverse para la manipulación de datos (data wrangling) y así filtrar, ordenar, agrupar y crear nuevas columnas. Para ello, usaremos el conjunto de datos de muestra llamado iris que se incluye en la instalación básica de R.\nA continuación analizaremos datos reales que el gobierno de México publica para estudiar los homicidios reportados desde diciembre de 2018 hasta marzo de 2022, y compararemos aquellos que ocurren en la Ciudad de México (CDMX) con los que se registraron en los demás estados del país. Entonces, el segundo objetivo de esta sesión es importar y preparar los datos usando las funciones del Tidyverse."
  },
  {
    "objectID": "4_Tidyverse.html#repaso-de-tidyverse",
    "href": "4_Tidyverse.html#repaso-de-tidyverse",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "Repaso de Tidyverse",
    "text": "Repaso de Tidyverse\nSiempre es recomendable limpiar el entorno antes de comenzar a trabajar. Ejecuta el siguiente chunk para limpiar todos los objetos del entorno:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRecuerda que para limpiar el entorno actual de R, también puedes utilizar el botón de la escoba en el panel Environment.\n\n\nPara esta sesión nos aseguraremos de tener instalados y actualizados todos los paquetes necesarios (descomenta la siguiente instrucción para instalar o actualizar los paquetes necesarios en caso de no tenerlos):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRecuerda que también puedes instalar o actualizar los paquetes necesarios para la sesión usando el panel “Packages” de RStudio.\n\n\nCarga el conjunto de datos de muestra iris en el entorno de R usando la función data y visualízalo en la siguiente línea:\n\n\n\n\n\n\n\n\nUsa la función library para cargar el paquete tidyverse que usaremos para manipular los datos:\n\n\n\n\n\n\n\n\n\nExploración de datos\nVisualiza rápidamente la estructura y contenidos de iris, usando la función glimpse:\n\n\n\n\n\n\n\n\nLa función glimpse funciona como un equivalente en Tidyverse de la función básica str.\nEl operador conocido como piline (%&gt;%) toma el resultado de la instrucción anterior y lo convierte en la entrada de la siguiente instrucción. Reescribe la instrucción del chunk anterior, usando una pipe:\n\n\n\n\n\n\n\n\nEncuentra los valores únicos de la variable Species del dataframe iris usando la función distinct y la sintaxis de pipe:\n\n\n\n\n\n\n\n\n\n\nSeleccionar variables\nSelecciona las variables Sepal.Length y Species del dataframe iris usando sus nombres con la función select y visualiza el resultado usando glimpse:\n\n\n\n\n\n\n\n\nSelecciona las variables Sepal.Length, Sepal.Width y Speciesdel dataframe irisy multiplícalas para crear una nueva variable llamada Sepal.Multiply usando la función mutate y visualiza el resultado usando glimpse:\n\n\n\n\n\n\n\n\n\n\nFiltrar los datos\nRepite las operaciones anteriores pero conservando sólo las filas donde el valor de Species es setosa, usando la función filter:\n\n\n\n\n\n\n\n\nRepite las operaciones anteriores, pero conservando sólo las filas donde los valores de Species son setosa y versicolor y el valores de Sepal.Length es mayor que 4.5, usando la función filter:\n\n\n\n\n\n\n\n\n\n\nOrdenar los datos\nRepite las operaciones anteriores y ordena los datos por Sepal.Length en orden ascendente usando la función arrange:\n\n\n\n\n\n\n\n\nRepite las operaciones anteriores ordenando los datos ahora por Sepal.Length en orden descendente usando desc y luego por Sepal.Multiply orden ascendente, usando la función arrange:\n\n\n\n\n\n\n\n\n\n\nAgrupar y sumarizar los datos\nCuenta el número de observaciones (filas) por cada valor único de la variable Species del dataframe iris, usando la función count:\n\n\n\n\n\n\n\n\nPara crear grupos categóricos usando variables se usa la función group_by. Agrupa los datos del dataframe iris usando el campo categórico Species:\n\n\n\n\n\n\n\n\nEste conjunto de datos no tiene cambios visibles, pero se crearon grupos para calcular en ellos estadísticos como estos:\n\nNúmero de observaciones (n, cuenta)\nSumatoria\nMedia\nMínimo\nMáximo\nMediana\nDesviación estándar\n\nCrea nuevas columnas con los estadísticos de la variable Petal.Length agrupados por cada valor único de la variable Species, usando la función summarize después de la función group_by y definiendo cada uno de los estadísticos con las funciones n (conteo), sum (sumatoria), min (mínimo), max (máximo), mean (promedio), median (mediana) y sd (desviación estándar):\n\n\n\n\n\n\n\n\nDespués de sumarizar los datos se conservan agrupados, es por eso que regularmente es necesario eliminar la agrupación y mantener el conjunto de datos transformado antes de realizar cualquier otra operación, para esto se usa la función ungroup. Repite la agrupación y sumarización del chunk anterior y desagrupa usando la función ungroup:"
  },
  {
    "objectID": "4_Tidyverse.html#caso-práctico-homicidios-a-nivel-nacional",
    "href": "4_Tidyverse.html#caso-práctico-homicidios-a-nivel-nacional",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "Caso práctico: Homicidios a nivel nacional",
    "text": "Caso práctico: Homicidios a nivel nacional\n\nImportar los datos\nEn esta sesión, usaremos los datos abiertos de incidencia delictiva que publica el Secretariado Ejecutivo del Sistema Nacional de seguridad Pública (SESNSP) que están disponibles en el portal de datos abiertos del Gobierno de México en https://www.datos.gob.mx/busca/dataset/incidencia-delictiva-del-fuero-comun. Estos datos contienen la información de delitos cometidos a nivel estatal y serán usados en el taller más adelante para comparar los niveles de homicidios que ocurrieron en la CDMX y en los demás estados del país.\nCarga el paquete lubridate para manejar más fácilmente los tipos de datos fecha-hora del conjunto de datos, y también carga el paquete janitor para realizar algunos procesos de limpieza a los datos:\n\n\n\n\n\n\n\n\nEste es un conjunto de datos que originalmente viene en un formato de texto plano separado por comas (CSV). Observa y ejecuta el siguiente chunk para leer el archivo de datos usando la función de read_csv de tidyverse (no la instrucción read.csv de R base) y asigna los datos a una nueva variable que se llame delitos:\n\n\n\n\n\n\n\n\nEn el chunk anterior, puedes observar lo siguiente:\n\nEn la instrucción read_csv se incluye un parámetro locale = locale(encoding = \"WINDOWS-1252\"). Esto se usa por que los datos originales se crearon en Windows, y aunque se puede omitir, no especificar esto puede provocar que aparezcan caracteres incorrectos en los datos al importarlos en otros sistemas operativos como macOS o Linux que usan el tipo de codificación UTF-8. # La función clean_names del paquete janitor convierte los nombres de las columnas a minúsculas, reemplaza los espacios con ‘_’ y reemplaza caracteres especiales y con acentos para evitar problemas al escribir códigos.\n\n\n\nPreparar los datos\nLos datos agrupan los totales de delitos en 12 columnas para cada mes, pero esta estructura no es útil para filtrar los datos por rangos de fecha. Para poder filtrar los datos por fecha, será necesario tener una columna mes de tipo de datos fecha en una forma de tabla larga. El siguiente bloque ejecutará en cadena las siguientes operaciones:\n\nTransformar la estructura a una forma larga, guardando los nombres de cada columna de mes en una nueva columna llamada mes_nombre y sus valores en una nueva columna llamada total usando la función pivot_longer.\nObtener el número del mes a partir de mes_nombre usando la función case_when para guardar el valor numérico correspondiente en una nueva columna llamada mes_numero.\nConstruir el mes en formato fecha usando las columnas ano, mes_numero y el número 1 para asumir el primer día del mes, para lo que se usa la función make_date para crear una nueva columna llamada mes.\nFinalmente quitar las columnas mes_nombre, mes_numero, ano que ya son innecesarias usando la función select y el signo - para excluirlas del tibble resultante.\n\nObserva cómo se construyó ésta secuencia usando las pipeline en el siguiente chunk, ejecútalo y observa el resultado:\n\n\n\n\n\n\n\n\nPara conocer la clasificación de los delitos a partir de los datos, crea una lista de los tipos de delitos a partir de los datos. Para ello construye con pipeline la siguiente secuencia de operaciones y guarda el resultado en una nueva variable llamada lista_delitos:\n\nToma como base los datos del tibble delitos.\nUsa la función distinct para obtener las categorías únicas de las columnas bien_juridico_afectado, tipo_de_delito, subtipo_de_delito y modalidad.\nOrdena los datos usando los campos bien_juridico_afectado, tipo_de_delito, subtipo_de_delito y modalidad en ése orden con la función arrange.\n\nEn la línea siguiente visualiza el contenido del tibble lista_delitos resultante.\n\n\n\n\n\n\n\n\nObtén los datos de homicidios que ocurrieron desde diciembre 2018 hasta junio 2020. Primero, es necesario definir las fechas de inicio y fin del periodo que necesitamos. Usa la función make_date del paquete lubridate para construir las variables mes_inicial y mes_final con tipo de datos de fecha:\n\n\n\n\n\n\n\n\nDespués, usa las pipeline para arreglar los datos y guardar en una nueva variable llamada homicidios el resultado de la siguiente secuencia de operaciones:\n\nToma el tibble delitos como base.\nFiltra los datos usando las condiciones tipo_de_delito == \"Homicidio\" y mes %&gt;% between(mes_inicial, mes_final) para mantener sólo los datos de homicidios y sus subcategorías en el periodo indicado usando la función filter.\nVisualiza la estructura del tibble resultante usando la función glimpse.\n\n\n\n\n\n\n\n\n\nPara conocer la evolución de los homicidios en cada estado y en el tiempo, agrupa y sumariza los totales de homicidios por entidad y mes. Asigna a una variable llamada homicidios_por_estado el resultado de las siguientes operaciones:\n\nToma el tibble homicidios como base.\nAgrupa los datos por cada clave_ent, entidad, y mes.\nObtén la suma del total de homicidios (usando el parámetro na.rm = TRUE para omitir los registros vacíos o NA) y guárdala en una nueva columna llamada homicidios_totales.\nDesagrupa los datos.\nVisualiza la estructura resultante.\n\n\n\n\n\n\n\n\n\n\n\nExportar los datos\nFinalmente, guarda una copia de homicidios_por_estado usando pipeline y las funciones write_csv o write_excel_csv para guardar los datos en formato CSV en el archivo homicidios_por_estado.csv en la carpeta Datos (se usarán más adelante en el taller):"
  },
  {
    "objectID": "4_Tidyverse.html#referencias",
    "href": "4_Tidyverse.html#referencias",
    "title": "Introducción al Tidyverse y exportación/importación de datos",
    "section": "Referencias",
    "text": "Referencias\n\nWickham, H., & Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize and model data. https://r4ds.had.co.nz. O’Reilly.\nLovelace, R., Nowosad, J., & Muenchow, J. (2019), Geocomputation with R. https://geocompr.robinlovelace.net. CRC Press.\nTennekes, M., Nowosad, J. (2021). Elegant and informative maps with tmap. Recuperado el 8 de septembiembre, 2021, desde https://r-tmap.github.io/tmap-book/\nEngel, C. (2019). Using Spatial Data with R. cengel.github.io. Recuperado el 8 de septembiembre, 2021, desde https://cengel.github.io/R-spatial/."
  },
  {
    "objectID": "Index.html",
    "href": "Index.html",
    "title": "Econometría",
    "section": "",
    "text": "Objetivo\nEste es un curso de las cosas básicas que se necesitan para poder tomar el curso de Econometría de CentroGeo\nEn este módulo se trataran los siguientes temas\n\nEmpezando con R\n\nIntroducción a R.\nDocumentos interactivos con RMarkdown y Quarto.\n\nOperadores y estructuras de datos.\n\nOperaciones y tipos de datos básicos.\nEstructuras de datos y conjuntos de datos (dataframes)\n\nControl de flujo, condicionales y funciones especiales.\n\nOperadores, ciclos y funciones.\nManipulación de fechas y horas.\nTransformación de datos con reshape.\n\nEl tidyverse.\n\n¿Qué es el tidyverse?\nLectura y escritura de datos\nManipulación de datos (data wrangling)\nVisualización de datos con ggplot2."
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html",
    "href": "2_Basicos_R_operaciones_tipos.html",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "",
    "text": "R es un lenguaje de programación para a la computación estadística. Es un software libre de código abierto ampliamente utilizado para el desarrollo de análisis de datos y más recientemente, para aplicaciones modernas como la ciencia de datos, el aprendizaje automático o la inteligencia artificial.\nEl exito de R es gracias a su versatilidad y potencia las cuales provienen de las contribuciones de las comunidades científicas y de desarrolladores de software que crean y publican paquetes que extienden las capacidades básicas del lenguaje R y que están rigurosamente documentados. El ecosistema de R permite el reaprovechamiento continuo del conocimiento y de la técnica para facilitar las tareas de procesamiento de información en prácticamente cualquier campo de trabajo."
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#introducción",
    "href": "2_Basicos_R_operaciones_tipos.html#introducción",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "",
    "text": "R es un lenguaje de programación para a la computación estadística. Es un software libre de código abierto ampliamente utilizado para el desarrollo de análisis de datos y más recientemente, para aplicaciones modernas como la ciencia de datos, el aprendizaje automático o la inteligencia artificial.\nEl exito de R es gracias a su versatilidad y potencia las cuales provienen de las contribuciones de las comunidades científicas y de desarrolladores de software que crean y publican paquetes que extienden las capacidades básicas del lenguaje R y que están rigurosamente documentados. El ecosistema de R permite el reaprovechamiento continuo del conocimiento y de la técnica para facilitar las tareas de procesamiento de información en prácticamente cualquier campo de trabajo."
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#objetivo",
    "href": "2_Basicos_R_operaciones_tipos.html#objetivo",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Objetivo",
    "text": "Objetivo\nEl objetivo de esta sesión es repasar las funciones básicas del lenguaje R para familiarizarse con su entorno y sintaxis."
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#operadores-básicos",
    "href": "2_Basicos_R_operaciones_tipos.html#operadores-básicos",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Operadores básicos",
    "text": "Operadores básicos\nEjecuta el siguiente chunk para obtener el resultado de la suma de 34 + 56:\n\n\n\n\n\n\n\n\nCompleta el siguiente bloque para obtener la resta de 45 - 13 (sustituye los asteriscos *** con el valor necesario):\n\n\n\n\n\n\n\n\nObtén los resultados de la multiplicación de 34 * 0.14 y la división de 89.4 / 5:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMas operaciones matematicas que se utilizan comunmente\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComo vemos el resultado de las últimas operaciones no son numeros este tipo de dato se le conoce como boleano o logico los cuales tiene 2 valores FALSE y TRUE. En este contexto nos sirve para hacer comparaciónes pero dentro de los lenguajes de programación son muy importantes."
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#asignación-de-variables",
    "href": "2_Basicos_R_operaciones_tipos.html#asignación-de-variables",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Asignación de variables",
    "text": "Asignación de variables\nPara crear variables y asignarles un valor se usan los operadores &lt;- o =. Asigna el valor numérico de 45 a la variable mi_numero:\n\n\n\n\n\n\n\n\nPara ver el valor de una variable, escribe su nombre y ejecuta el código. Ejecuta el siguiente chunk para visualizar el valor de la variable mi_numero:\n\n\n\n\n\n\n\n\nLa asignación de valores a una variable también se puede hacer de manera inversa usando la flecha -&gt; en vez de &lt;- y especificando primero el valor y luego el nombre de la variable. Asigna nuevamente el valor 36 a la variable otro_numero, usando ahora la asignación inversa, y visualiza el valor de la variable otro_numero en la siguiente línea:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara asignar una variable de tipo texto o caracter, el valor tiene que escribirse entre comillas dobles \" o simples '. Asigna el valor \"Este es un texto!\" a la variable mi_texto:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#tipos-de-datos",
    "href": "2_Basicos_R_operaciones_tipos.html#tipos-de-datos",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Tipos de datos",
    "text": "Tipos de datos\nAl igual que otros lenguajes de programación, R maneja diferentes tipos de datos básicos para almacenar datos. Es importante entender estos tipos de datos para poder utilizar las funciones de R correctamente.\n\nNumérico\nSon números que tienen un valor decimal o son una fracción. Asigna el valor númerico de 1.5 a la variable a y en la siguiente línea visualiza su valor:\n\n\n\n\n\n\n\n\nLa función class se usa para comprobar el tipo de dato de una variable. Comprueba el tipo de dato de la variable a:\n\n\n\n\n\n\n\n\nTambien se puede usar la función typeof().\n\n\nEntero\nLos números que no contienen valores decimales tienen un tipo de datos entero. Por defecto, si se escribe un número sin valor decimal, R lo interpreta como numérico, por lo que es necesario declararlo explícitamente como entero utilizando la función as.integer. Cambia el valor numérico de la variable a por el valor entero de 1 convirtiendo 1.5 con la función as.integer y visualiza el nuevo valor de a:\n\n\n\n\n\n\n\n\nAhora, comprueba el nuevo tipo de datos de la variable a:\n\n\n\n\n\n\n\n\n\n\nCaracter\nUna letra, número o una combinación de letras encerrada entre comillas simples ' o dobles \" es considerada como un tipo de datos de caracter por R. Cambia el valor de la variable entera a por el texto \"Me gusta este taller! (O no?)\" y visualiza el nuevo valor de a:\n\n\n\n\n\n\n\n\nAhora, comprueba el nuevo tipo de dato de la variable a:\n\n\n\n\n\n\n\n\nLos tipos de datos de tipo caracter también se conocen como cadenas de texto.\n\n\nLógico\nUna variable que sólo puede tener los valores TRUE (verdadero) y FALSE (falso) es conocida como variable lógica o booleana. Cambia el valor de la variable de caracter a con el valor FALSE (con mayúsculas) y visualiza su valor:\n\n\n\n\n\n\n\n\nAhora, comprueba el nuevo tipo de dato de la variable a:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#condicionales",
    "href": "2_Basicos_R_operaciones_tipos.html#condicionales",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Condicionales",
    "text": "Condicionales\nAsigna el valor 5 a la variable a y el valor 6 a la variable a:\n\n\n\n\n\n\n\n\nEjecuta el siguiente chunk para comparar los valores de las variables a y b:\n\n\n\n\n\n\n\n\nEs posible comparar valores únicos, vectores de múltiples elementos o ambos. Comprueba cada uno de los elementos de mi_vector para verificar si son mayores que el valor de a:\n\n\n\n\n\n\n\n\nVerificar si el valor de b está entre los elementos de mi_vector usando el operador %in%:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#vectores-y-listas",
    "href": "2_Basicos_R_operaciones_tipos.html#vectores-y-listas",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Vectores y Listas",
    "text": "Vectores y Listas"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#vectores",
    "href": "2_Basicos_R_operaciones_tipos.html#vectores",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Vectores",
    "text": "Vectores\nLos vectores son estructuras básicas de datos que se usan en R para computar múltiples valores a la vez y para almacenar elementos con el mismo tipo de datos. Completa los valores necesarios para crear un vector con los elementos (5, 2, 4, 9, 8, 9, 1, 2, 2) usando c(), asignalo a la variable mi_vector y visualiza el valor de la variable en la siguiente línea:\n\n\n\n\n\n\n\n\nAhora, comprueba el nuevo tipo de dato de la variable mi_vector:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#listas",
    "href": "2_Basicos_R_operaciones_tipos.html#listas",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Listas",
    "text": "Listas\nLas listas son estructuras que permiten almacenar múltiples componentes de cualquier tipo que R pueda manejar, como las variables, los vectores u otras listas. A diferencia de los vectores, las listas permiten almacenar diferentes tipos de datos y estructuras.\nAsigna los valores de texto (\"A\", \"B\", \"C\") a la variable b, y crea una lista llamada mi_lista que contenga como componentes el valor TRUE y las variables mi_vector y otro_vector usando la función list. Visualiza el contenido de mi_lista:\n\n\n\n\n\n\n\n\nCrea otra lista llamada otra_lista que contenga como componentes el valor 456.123 y la lista mi_lista y visualiza el contenido de otra_lista:\n\n\n\n\n\n\n\n\nAhora, comprueba el tipo de dato de la variable otra_lista:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#factores",
    "href": "2_Basicos_R_operaciones_tipos.html#factores",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Factores",
    "text": "Factores\nSe usan para crear variables categóricas como por ejemplo colores, bueno y malo, calificaciones de cursos o películas, que son muy útiles para el modelado estadístico. Cambia el valor de la variable lógica a por un factor construido a partir de los valores c(\"bajo\", \"bajo\", \"alto\", \"medio\", \"alto\", \"medio\", \"bajo\") usando la función factor y visualiza el nuevo valor de la variable a en la siguiente línea:\n\n\n\n\n\n\n\n\nUn factor permite agrupar los valores por categorías llamadas niveles. Comprueba los niveles en los que se pueden agrupar los valores del factor a, usando la función levels:\n\n\n\n\n\n\n\n\nAhora, comprueba el nuevo tipo de dato de la variable a:"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#dataframes",
    "href": "2_Basicos_R_operaciones_tipos.html#dataframes",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "DataFrames",
    "text": "DataFrames"
  },
  {
    "objectID": "2_Basicos_R_operaciones_tipos.html#referencias",
    "href": "2_Basicos_R_operaciones_tipos.html#referencias",
    "title": "1.Basicos R Operaciones y tipos de datos",
    "section": "Referencias",
    "text": "Referencias\n\nWickham, H., & Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize and model data. https://r4ds.had.co.nz. O’Reilly.\nXie, Y., Allaire, J. J., & Grolemund, G. (2018). R markdown: The definitive guide. https://bookdown.org/yihui/rmarkdown/. CRC Press.\nRStudio Cheatsheets. (n.d.). Rstudio.com. Recuperado el 8 de septiembre de 2021, desde https://www.rstudio.com/resources/cheatsheets/\nBaruffa O. (2021). Big Book of R. https://www.bigbookofr.com/index.html"
  },
  {
    "objectID": "2_2_Estructuras_Dataframes.html",
    "href": "2_2_Estructuras_Dataframes.html",
    "title": "Vectores, Listas y Dataframes",
    "section": "",
    "text": "Crea un vector con una secuencia de números enteros del 2 al 10, usando la instrucción 2:10:\n\n***:***\n\nCrea un vector que contenga la secuencia de 0 a 10 con pasos de 2.5 usando la función seq:\n\nseq(from = ***, to = ***, by = 2.5)\n\nRepite 4 veces los elementos del vector 1:3 usando la función rep, especificando el parámetro times:\n\nrep(***, times = 4) # Repetir un vector n veces\n\nRepite 3 veces cada uno de los valores del vector 1:2 usando la función rep, especificando el parámetro each:\n\nrep(***, each = 3) # Repetir cada valor de un vector n veces\n\nOrdena de manera ascendente los valores de mi_vector usando la función sort:\n\nsort(***)\n\nOrdena de manera descendente los valores de mi_vector usando la función sort, ahora especificando el parámetro decreasing = TRUE:\n\nsort(***, decreasing = ***) # Orden descendente\n\nInvierte el orden de los elementos de mi_vector usando la función rev:\n\nrev(***)\n\nObtén una tabla con el conteo de cada elemento de mi_vector usando table:\n\ntable(***)\n\nObtén los valores únicos del vector mi_vector usando la función unique:\n\nunique(***)\n\n\n\nEn R se utilizan los corchetes [] para seleccionar elementos internos, para seleccionar el cuarto elemento de mi_vector\n\n***[4] # Selecciona el 4to. elemento en mi_vector\n\n\n\n\n\n\n\nImportant\n\n\n\nEl índice en R empieza desde 1, otros lenguajes de programación es distinto.\n\n\nSelecciona todos los elementos de mi_vector excepto el cuarto usando el índice negativo -4:\n\n***[-4] # Selecciona todo excepto el 4to. elemento en mi_vector\n\nSelecciona los elementos 2 al 5 de mi_vector:\n\n***[***:5] # Selecciona del 2do. al 5to. elemento en mi_vector\n\nSelecciona todos los elementos de mi_vector excepto los del 2 al 5 usando el índice negativo -(2:5):\n\n***[-(2:***)] # Selecciona todos los elementos excepto los elementos del 2do. al 5to. en mi_vector\n\nSelecciona sólo los elementos 1 y 5 de mi_vector usando el vector c(1,5):\n\n***[c(***,5)] # Selecciona sólo el 1ro. y 5to. elementos en mi_vector\n\nSeleccionar elementos de mi_vector que son iguales a 2:\n\n***[mi_vector == ***] # Seleccionar elementos iguales a 2 en mi_vector\n\nSelecciona elementos de mi_vector que sean menores a 3:\n\n***[*** &lt; 3] # Selecciona los elementos menores a 3 en mi_vector\n\nSelecciona los elementos de mi_vector que sean iguales a 1, 2 ó 5 usando el operador %in% y un vector con los valores c(1, 2, 5):\n\n***[*** %in% c(1, ***, ***)]"
  },
  {
    "objectID": "2_2_Estructuras_Dataframes.html#dataframes",
    "href": "2_2_Estructuras_Dataframes.html#dataframes",
    "title": "Vectores, Listas y Dataframes",
    "section": "Dataframes",
    "text": "Dataframes\nEn R, un dataframe es una colección de elementos acoplados que construyen una tabla donde cada columna tienen un tipo de datos en particular. Los dataframes son las estructuras de datos fundamentales que usa la mayoría del software de modelado de R.\nConstruye un dataframe usando la función data.frame e incluyendo como parámetros una columna x con los valores enteros de 1 a 5 y una columna y con los caracteres (\"A\", \"B\", \"C\", \"D\", \"E\"), asígnalo a la variable mi_df y visualiza su contenido en la siguiente línea:\nmi_df &lt;- data.frame(x = ***, y = c(***))\n*** # Visualizar el contenido del dataframe \nVisualiza el contenido completo de mi_df usando la función View (en RStudio, se abre una nueva ventana):\n\nView(***)\n\nTambién puedes visualizar los dataframes usando el panel Environment en RStudio.\nVisualiza rápidamente las primeras filas de mi_df, usando la función head para visualizar las primeras 5 filas especificando el parámetro n = 5:\n\nhead(***, n = ***) # Si se omite el parámetro n, la función head regresa las primeras 5 filas por defecto\n\nVisualiza rápidamente las últimas filas de mi_df, usando la función tail para visualizar las últimas 5 filas especificando el parámetro n = 5:\n\ntail(***, n = ***) # Si se omite el parámetro n, la función tail regresa las últimas 5 filas por defecto\n\nPara acceder a una fila en particular en dataframe, especifica la posición del elemento entre corchetes ([Fila, Columna]). Accede al contenido de la primera fila completa de mi_df, omitiendo el índice para la columna:\n\nDataframes\nEn R, un dataframe es una colección de elementos acoplados que construyen una tabla donde cada columna tienen un tipo de datos en particular. Los dataframes son las estructuras de datos fundamentales que usa la mayoría del software de modelado de R.\nConstruye un dataframe usando la función data.frame e incluyendo como parámetros una columna x con los valores enteros de 1 a 5 y una columna y con los caracteres (\"A\", \"B\", \"C\", \"D\", \"E\"), asígnalo a la variable mi_df y visualiza su contenido en la siguiente línea:\nmi_df &lt;- data.frame(x = ***, y = c(***))\n*** # Visualizar el contenido del dataframe \nVisualiza el contenido completo de mi_df usando la función View (en RStudio, se abre una nueva ventana):\n\nView(***)\n\nTambién puedes visualizar los dataframes usando el panel Environment en RStudio.\nVisualiza rápidamente las primeras filas de mi_df, usando la función head para visualizar las primeras 5 filas especificando el parámetro n = 5:\n\nhead(***, n = ***) # Si se omite el parámetro n, la función head regresa las primeras 5 filas por defecto\n\nVisualiza rápidamente las últimas filas de mi_df, usando la función tail para visualizar las últimas 5 filas especificando el parámetro n = 5:\n\ntail(***, n = ***) # Si se omite el parámetro n, la función tail regresa las últimas 5 filas por defecto\n\nPara acceder a una fila en particular en dataframe, especifica la posición del elemento entre corchetes ([Fila, Columna]). Accede al contenido de la primera fila completa de mi_df, omitiendo el índice para la columna:\n\nmi_df[***, ] # Omite el índice de la columna para acceder a la fila completa\n\nAccede al contenido de la primer columna completa de mi_df, omitiendo el índice para la fila:\n\nmi_df[, ***] # Omite el índice de la fila para acceder a la columna completa\n\nLa manera más común de acceder a los valores en una variable (columna) es usando el separador $. Accede al valor de la columna y de mi_df usando el separador $:\n\nmi_df$*** # Usa el nombre de la variable\n\nAccede a al elemento que está en la segunda fila y en la segunda columna de mi_df:\n\n\nmi_df[***, ***] # Acceder al elemento de la fila 2, columna 2\n\nComprueba el número de filas y columnas (dimensiones) que tiene mi_df usando la función dim:\n\n\ndim(***) # Dimensiones del dataframe (números de columnas y filas)\n\nComprueba el número de filas que tiene mi_df usando la función nrow:\n\n\nnrow(***) # Número de filas en un dataframe\n\nComprueba el número de columnas que tiene mi_df usando la función ncol:\n\n\nncol(***) # Número de columnas en un dataframe\n\nCrea un dataframe de una sola columna llamada z que contenga los valores enteros de 6 a 10, asígnalo a la variable nueva_columna y visualiza su contenido en la siguiente línea:\n\n\nnueva_columna &lt;- data.frame(*** = c(***:***)) # Debe tener el mismo número de filas que el dataframe\n***\n\nAgrega la columna del dataframe nueva_columna a mi_df usando la función cbind:\n\n\nmi_df &lt;- cbind(mi_df, ***)\n***\n\nExtrae la fila 2 de mi_df, asígnala a la variable nueva_fila y visualiza su contenido:\n\n\nnueva_fila &lt;- mi_df[***, ] # Agregar una copia de la fila 2, debe tener los mismos nombres de variables o se agregarán nuevas columnas con los nombres restantes\n*** # Visualiza el contenido del dataframe\n\nAgregar la fila de nueva_fila al mi_dfusando la función rbind:\n\n\nmi_df &lt;- rbind(mi_df, ***)\n***\n\nUsa la función str para visualizar un resumen de la estructura y contenido del dataframe mi_df:\n\n#| eval: false\nstr(***)\n\nRevisa los estadísticos básicos de las columnas del dataframe mi_df usando la función summary:\n\nsummary(***)\n```l índice de la fila para acceder a la columna completa\n\nLa manera más común de acceder a los valores en una variable (columna) es usando el separador $. Accede al valor de la columna y de mi_df usando el separador $:\n\nmi_df$*** # Usa el nombre de la variable\n\nAccede a al elemento que está en la segunda fila y en la segunda columna de mi_df:\n\n\nmi_df[***, ***] # Acceder al elemento de la fila 2, columna 2\n\nComprueba el número de filas y columnas (dimensiones) que tiene mi_df usando la función dim:\n\n\ndim(***) # Dimensiones del dataframe (números de columnas y filas)\n\nComprueba el número de filas que tiene mi_df usando la función nrow:\n\n\nnrow(***) # Número de filas en un dataframe\n\nComprueba el número de columnas que tiene mi_df usando la función ncol:\n\n\nncol(***) # Número de columnas en un dataframe\n\nCrea un dataframe de una sola columna llamada z que contenga los valores enteros de 6 a 10, asígnalo a la variable nueva_columna y visualiza su contenido en la siguiente línea:\n\n\nnueva_columna &lt;- data.frame(*** = c(***:***)) # Debe tener el mismo número de filas que el dataframe\n***\n\nAgrega la columna del dataframe nueva_columna a mi_df usando la función cbind:\n\n\nmi_df &lt;- cbind(mi_df, ***)\n***\n\nExtrae la fila 2 de mi_df, asígnala a la variable nueva_fila y visualiza su contenido:\n\n\nnueva_fila &lt;- mi_df[***, ] # Agregar una copia de la fila 2, debe tener los mismos nombres de variables o se agregarán nuevas columnas con los nombres restantes\n*** # Visualiza el contenido del dataframe\n\nAgregar la fila de nueva_fila al mi_dfusando la función rbind:\n\n\nmi_df &lt;- rbind(mi_df, ***)\n***\n\nUsa la función str para visualizar un resumen de la estructura y contenido del dataframe mi_df:\n\n#| eval: false\nstr(***)\n\nRevisa los estadísticos básicos de las columnas del dataframe mi_df usando la función summary:\n\nsummary(***)"
  }
]