---
title: "Control de flujo, condicionales y funciones especiales"
#author: "J. Miguel Salazar (msalazar@centrogeo.edu.mx), _Ana J. Alegre (jalegre@centrogeo.edu.mx), Cristian Silva (csilva@centrogeo.edu.mx)"
format: live-html
webr:
  packages:
    - learnr
    - lubridate
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}





# Estructuras de control 

Las estructuras de control de flujo nos permiten usar una cierta lógica para controlar como se ejecutan las cosas dentro de los lenguajes de programación, cada lenguaje de programación tiene la sintaxis especifica para cada  estructura de control en este tutorial aprenderemos como se escriben y cuales son los usos comunes de estas estructuras. 


## If else 

La estructura de control `if else ` es la estructura de control más simple y más usada dentro de los lenguajes de programación. Esta estructura de control verifica una condición si es cierta se ejecuta el código dentro de de las `{}`.

```r
if(condicion) {
  ### Hacer algo cuando se cumple la condicion 
} 

```
Si no se cumple la condición la ejecución del código continua de forma normal. En el siguiente ejemplo podemos observar que lo que se encuentra dentro del `{}` se ejecuta si se modifica el `TRUE` por `FALSE` entonces la linea `print('Se ejecuta el código')`  no se ejecutara. 

```{webr}
print('hola')
if(TRUE){
  print('Se ejecuta el código')
}

print('Es algo simple')
```
En muchas ocaciones es deseable que si se no se cumple la condición, entonces el comportamiento de la ejecución sea distinto a a cuando la condición se  cumple. En este caso se utiliza `else` y `{}` para ejecutar el codigo en el caso que no se cumpla la condición. 

```r
if(condicion) {
  ### Hacer algo cuando se cumple la condicion 
} 
else {
  ### Hacer cuando la condicion no se cumple 
}
```


En el siguiente ejemplo vamos a a generar un número aleatorio usando la función `runif` dependiendo del valor de la variable `x` se le asigna el valor a la variable `y` si `x` es mayor que 3 entonces `y` valdrá 10 en caso contrario 0. 

```{webr}

x <- runif(1, 0, 10)  
if(x > 3) {
  y <- 10
} else {
  y <- 0
}
print(y)
```

Este ejemplo nos muetra que la condición entre los parentesis es la que determina el valor de la variable `y` mostrando las posibilidades de esta estructura. 


## for 

Los ciclos **for** nos permiten ejecutar una secuencia de instrucciones para un número fijo de veces. La mayoria de la veces este tipo de ciclo es suficiente aunque existen otros tipos de ciclos este es el más usado. 

La estructura toma una variale y se le asigna un valor de una sequencia predeterminada, esta normalmente es un vector o una secuencia en R. 


```r 
for(i in 1:10) {
  print(i)
}

```

En este loop la variable `i` toma los valores de 1, 2, 3, 4, ... , 10, y se ejecuta el código que se encuentra entre las `{}` y se sale del ciclo. 

Podemos iterar sobre objetos y que la variable sobre la cual hacemos el ciclo nos ayude hacer cosas más complicadas.  

```{webr}
for ( i in seq(from = 3, to= 15, by=3)){
  print(i*2)
}
```
En el siguiente ciclo se ve que podemos hacer aumentar el número de instrucciones y declarar variables dentro del ciclo o modificar variables ya existentes. 

* Multiplica el valor de la variable `i` por 10 y asigna el resultado a la variable `j` 
* Imprime el valor de `j`

```{webr}
for(i in ***:***) {
  j <- i * ***
  print(***)
}
```

## while

Los ciclos `while` nos permiten ejecutar el código dentro del ciclo mientras una cierta condicion sea verdadera. En cada iteración del ciclo se verifica que la condición sea verdadera en caso contrario el ciclo se termina y no se ejecuta. En este ciclo es muy importante verificar que el ciclo termine, es decir que la condición que se utiliza  eventualmente no se cumpla y que el ciclo termine. 


```r 
i <- 0 
while(i < 10 ){
  print(i)
  i<- i+1
}

```

En el siguiente ejempo se asigna el valor de 1 a la variable `i` para que sea el valor inicial. Después usa la estructura `while` para repetir las siguientes operaciones mientras que el valor de `i` sea menor a 10: \* Imprime el valor actual de `i` \* Al valor de `i` súmale 1 y vuelva a asignar el resultado a la variable `i` para actualizarla.


Asigna el valor de 40 a la variable `k`. Usa la estructura `if` para verificar si el valor de `k` es mayor a 10, en caso de que lo sea imprime el texto `"La variable k es mayor que 10"`, o en caso contrario, imprime el texto `"La variable k es menor o igual que 10"`:

```{webr}
k <- ***
if(k > 10) {
  print(***)
} else {
  print(***)
}
```

# Funciones 

Las funciones permiten repetir un bloque de operaciones comunes cambiando parámetros de entrada para obtener los resultados deseados, reciclando así el código.


La sintaxis de una función en R es de la siguiente forma:
```r
mi_funcion <- function() {
  #### Esta funcion no hace nada
}
mi_funcion()
```

El nombre de la función es `mi_funcion` y para ejecutar el código que se encuentran entre los `{}` se llama `mi_funcion()`. Lo que se encuentra dentro de los `{}` se le llama el cuerpo de la función y las funciones pueden utilizar parámetros los cuales se declaran dentro de los `()`. Es claro que la función no hace nada. Veamos un ejemplo. 


```{webr}
mi_funcion <- function(){
  print('Se ejecuta lo que hay dentro de la función')
}
```
Un vez defina la función podemos llamarla tantas vececs ccomo sea necesario. 
```{webr}
mi_funcion()
```

Para pasar parámetros dentro de las funciones esto se haec dentro de los `()`

```{webr}
mi_funcion_2 <- function(num ) {
  for(i in seq(num)) {
    print('Hola')
  }
  
}
```


```{webr}
mi_funcion_2(4)
```

A veces nos gustaria ser más enfaticos en lo que nos regresa la función y determinar las  cosas que se modificaron dentro de esta. Esto se puede hacer con la palabra `return`, cuando se utiliza la palabra `return` se termina la función esto es especialmente útil cuando queremos que la función tenga un comportamiento distinto. 


```{webr}
mi_funcion_2 <- function(num ) {
  for(i in seq(num)) {
    print('Hola')
  }
  val_return <- nchar('Hola')*num
  return(val_return)  
}
```

```{webr}
mi_funcion_2(7)
```


Construye una función para calcular el porcentaje que representa el parámetro `parte` respecto al parámetro `total`. Para ello, usa la estructura de `function` para realizar las siguientes operaciones: 

* Asigna a `calcular_porcentaje` una nueva función con `function` y especifica los parámetros necesarios para el cálculo: `parte` y `total`.

* Calcula la división de `parte` entre `total`, multiplícalo por 100 y asígnalo a la variable `porcentaje` \* Especifica a la función que regrese como resultado el valor de la variable `porcentaje` usando `return`:

```{webr}

calcular_porcentaje <- function(parte, total) {
  porcentaje <- *** / *** * 100
  return(***)
}
```


Usa la función `calcular_porcentaje` para calcular el porcentaje que representa 15 en 234, usando como parámetros de la función `parte = 15` y `total = 234`:

```{webr}
# Llama la función:
calcular_porcentaje(parte = ***, total = ***)
```

Usa nuevamente la función `calcular_porcentaje` para calcular el porcentaje que representa 20 en 200, omitiendo los nombres de los parámetros y pasando los parámetros en el mismo orden en que se definieron en la función:

```{webr}
#| eval: false
# Omitiendo nombres de parámetros, escribir los valores en el orden que se definieron los parámetros en la función:
***(***, ***) 
```



# Fechas

Los datos de hora y fechas merecen una atención especial, pues no han sido uniformes y la forma en la forma en la cual se representa varia. 

Para ayudarnos con esta dificultades vamos a utilizar la biblioteca `Lubridate` la cual podemos instalar y llamarla.

```{webr}
library(lubridate)
```
Para saber la fecha del sistema, se puede obtener de forma directa, no es nececsario el uso de lubridate. 
```{webr}
Sys.Date()
```
De la misma forma para obtenerla con lubridate 
```{webr}
lubridate::today()
```

En *R* tenemos tres tipos de datos de horas y fechas

```{webr}
class(Sys.Date())
## [1] "Date"
class(lubridate::now())
## [1] "POSIXct" "POSIXt"
class(release_date)
## [1] "character"
```

Como vamos a usar la biblioteca *lubridate* esta tiene funciones para obtener fechas en tipos especificcos y veremos algunas de estas:

* ymd() Pasar año, mes, día.
* ymd_hms() Pasar año mes dia hora minuto segundo.
* dmy() Pasar dia, mes, año.
* dmy_hms() Pasar dia, mes año.
* mdy()  Pasar mes, dia, año.


Provemos 

```{webr}
mdy("02-15-2025")
dmy_hms("15-02-2025_01:15:03")
dmy("15-02-2025")
ymd("2025-02-15")
ymd_hms("2025-02-15_01:15:03")
```

La clase de dato `Date` representa fechas en el calendario

```{webr}
class(as.Date("2025-05-05"))
```

Las fechas pueden ser comparadas 

```{webr}

lubridate::today() > as.Date("2024-05-14")

```
Pero tambien puede entender hacer una comparación con el string de una fecha.

```{webr}
lubridate::today() > "2024-05-14"
```

Esto siempre que no haya una ambiguedad.


```{webr}
#| caption: Exercicio_fecha 
#| exercise: ex_1_fecha
_____ ### Fecha del dia del amor y amistad año pasado 
```



```{webr}
#| exercise: ex_1_fecha
#| check: true
if (identical(.result, as.Date("2024-02-14"))) {
  list(correct = TRUE, message = "Nice work!")
} else {
  list(correct = FALSE, message = "That's incorrect, sorry.")
}
```



::: {.solution exercise="ex_1_fecha"}
#### Solution

```{webr}
#| exercise: ex_1_fecha
#| solution: true
as.Date("2024-02-14")
```
:::


Dentro de las fecchas también  podemos obtener cosas como la fecha, el año, el mes, el día, el dia de la semana, la hora, el minuto, los segundos, la zona horaria, la semana, etc. 

* date(x) Fecha.
* year(x) Año. 
* month(x, label, abbr) Mes escrito.
* month(dt) Mes número.
* day(x) Dia del mes.
* wday(x, label, abbr) Dia de la semana.
* hour(x) Hora del día
* minute(x) Minutos
* second(x) Segundos
* tz(x) Zona horaria
* week(x) Semana del año. 


```{webr}
date_te <- ymd_hms("2025-02-15_01:15:03")

date(date_te)
#year(date_te)
#month(date_te , label= TRUE, abbr=FALSE)
#month(date_te)
#day(date_te)
#wday(date_te)
#wday(date_te , label= TRUE, abbr=FALSE)
#hour(date_te)
#minute(date_te)
#second(date_te)
#tz(date_te)
#week(date_te)
```

Como las fechas dependen de las zonas horarias, entonces es neccesario una herramienta para poder tanto cambiar la fecha a la hora que necesitamos, como saber la fecha en otra zona horaria

En para mostrarnos la fecha en otra zona horaria usamos `with_tz` 
```{webr}
date_te <- ymd_hms("2025-02-15_12:15:03", tz = "America/Mexico_City")
with_tz(date_te, tzone = "Australia/Lord_Howe")
with_tz(date_te, tzone = "Asia/Shanghai")
```
Y para cambiarla `forze_tz`

```{webr}
date_nueva <- force_tz(date_te, tzone = "Australia/Lord_Howe")
```

Pueden encontrar un cheatsheets (acordeon) en el siguiente [link](https://rawgit.com/rstudio/cheatsheets/main/lubridate.pdf){target="_blank"}







# Evaluación 

¿ Cuál de las estructuras de control nos permite verificar una condición y ejecutar código a partir de esto ? 

  * If
  * For
  * While
  * next

¿ Qué imprime el siguiente código si el valor de la variable `x` es 10 ?

```r 

if(x*15 < 145){
  print('Esto esta bien')
  if(x -5 , 5){
    print("Aquí vamos")
  } else{
    print("Aquí no vamos")
  }
} else{
  print('Esto esta bien mal')
}

```

* Esto esta bien
* Aquí vamos
* Aquí no vamos
* Esto esta bien mal



¿ Qué sucede con la variable `y` al pasar por la siguiente estructura de control? 

```r
if(y <0){
  y <- -y
}else{
  y <- y
}
```

* Cambia `y` por el valor negativo de `y`
* Cambia `y` por el valor  `2y`
* Cambia `y` por el valor absoluto de `y`
* Deja a 'y' igual. 



Sustituyendo valores determina que haec el siguiente código. 
```r
x <- c(*, *, *)

if (x[1] > x[2] & x[1] > x[3] ) {
    print(x[1])
} else if (x[2] > x[3] ) {
    print(x[2] )
} else {
    print(x[3]  )
}

```

* Imprime siempre el valor en `x[1]`
* Imprime siempre el valor en `x[2]`
* Imprime siempre el valor en `x[3]`
* Imprime siempre el valor máximo en `x`
* Imprime siempre el valor mínimo en `x`


Si la variable `valor` es 75 que imprime el siguiente código

```r
if (valor > 100) {
    print("El valor es alto")
} else {
    if (value > 50) {
        print("El valor es moderado")
    } else {
        print("El valor es bajo")
    }
}
```

* 
* El valor es alto
* El valor es moderado
* El valor es bajo



Si 'x' es un vector números que se tiene que cambiar `***` para obtener el promedio de los elementos ene el vector.
```r
suma_total <-0 
for (i in x){
  suma_total <- suma_total +***
}
if (length(x)==0){
  print('No hay elementos en x')
}else{
  suma_total/length(x)
}

```

* Nada
* i
* x
* suma_total

¿ Qué hace el siguiente código? 

```r 
for(i in 1:30){
  if(i%%3 == 1){
    print(i)
  }
}

```

* Imprime los múltiplos de 3.
* Imprime desde 1 hasta 30.
* Imprime los números de 1 a 30 sin los múltiplos de 3.
* Imprime los números de 1 a 30 que son de la forma $3n+1$.


```r 
x <- 1:12
for(i in x){
  if(i%%4==0){
    print(x[(i-3):i])
  }
}

```

* Imprime todos los elementos de x de forma continua.
* Imprime en 3 en 3.
* Imprime en 4 en 4.
* Imprime en 2 en 2.


El siguiente código que imprime

```r

diametro <- 12
radio_off <- (diametro/2)-0.5
for( j in 1:diametro-1){
    for( i in 1:diametro-1){
        x <- i- radio_off
        y <- j-radio_off
        #print(x)
        #print(y)
        if ((x*x) + (y*y) <= radio_off * radio_off -1){
           cat(' * ' )
        }else {
           cat('   ')#cat('no') #
        }
  }
  cat('\n') 
}
```
* Un cuadrado
* Un círculo 
* Un Octágono
* Un Triángulo 



Tomando la siguiente función cuál es el resultado de aplicar dicha función al vector `c(3,5,6,12,NA)`
```r 
rescalar <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
```
* 3 5 6 12 NA
* NA NA NA NA NA
* 0.0000000 0.2222222 0.3333333 1.0000000 NA
* 0.0000000 0.2222222 0.3333333 1.0000000


De la función en el ejercicio anterior vamos a modificarla para obtener 


```r
rescalar <- function(x) {
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
```

* 3 5 6 12 NA
* NA NA NA NA NA
* 0.0000000 0.2222222 0.3333333 1.0000000 NA
* 0.0000000 0.2222222 0.3333333 1.0000000

¿ Qué hizo la modificación anterior ?

* Nada.
* No permite números.
* Solo permite números.
* Permite no evaluar la función en vectores sin cierta información.


 Usando la siguiente función determine que hace. 
```r
f1 <- function(string, prefix) {
  substr(string, 1, nchar(prefix)) == prefix
}

```

* Concatena los strings `string`y `prefix`.
* Determina si `prefix` es el prefico del string `string`.
* Elimina el último caracter de `string`
* Añade un caracter al string `string`. 


¿Cómo se modifica la siguiente función para que regrese los elementos de un vector salvo el último?
```r
f2 <- function(x) {
  if (length(x) <= 1) return(NULL)
  x[length(x)]
}
```

* Se deja igual.
* Se añade `2:length(x)` dentro de `[]`
* Se elimina `if (length(x) <= 1) return(NULL)`
* Se añade `-` al interior dentro de `[]`

¿ En la función anterior que hace el código `if (length(x) <= 1) return(NULL)`?

* Nada
* Si los elementos tienen longitud 1 o menor regresa NULL
* Regresa el último elemento.
* Regresa el vector completo.



Usando la siguiente fecha que nos regresa el siguiente código. 

```r
date_eje <- ymd_hms("2025-06-04_14:15:03", tz = "America/Mexico_City")
hour(with_tz(date_eje, tz = "Asia/Tokyo"))
```
* 5
* 14
* 20
* 04



```r
date_eje <- ymd_hms("2025-06-04_14:15:03", tz = "America/Mexico_City")
date_eje2 <- ymd_hms("2025-06-04 23:15:03", tz = "Europe/Berlin" )
date_eje > date_eje2
```

* TRUE
* FALSE 
* NULL
* NAN



# Referencias
- Roger D. Peng (2022) *R Programming for Data Science* [https://bookdown.org/rdpeng/rprogdatascience/](https://bookdown.org/rdpeng/rprogdatascience/)
